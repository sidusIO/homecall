// @generated by protoc-gen-connect-es v1.4.0
// @generated from file homecall/v1alpha/device_service.proto (package homecall.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EnrollRequest, EnrollResponse, GetCallDetailsRequest, GetCallDetailsResponse, UpdateNotificationTokenRequest, UpdateNotificationTokenResponse } from "./device_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * DeviceService is the service that devices talk to in order to enroll and receive calls.
 *
 * @generated from service homecall.v1alpha.DeviceService
 */
export declare const DeviceService: {
  readonly typeName: "homecall.v1alpha.DeviceService",
  readonly methods: {
    /**
     * Enroll is called by a device to enroll with the service.
     * This call is only called once per device during the initial setup.
     *
     * @generated from rpc homecall.v1alpha.DeviceService.Enroll
     */
    readonly enroll: {
      readonly name: "Enroll",
      readonly I: typeof EnrollRequest,
      readonly O: typeof EnrollResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * UpdateNotificationToken is called by a device to update the FCM token.
     * This token is used to send push notifications to the device.
     * This should be called whenever the FCM token changes.
     * It should also be called when the device is first enrolled and every 30 minutes to mark the device as active.
     *
     * Call is authenticated using the a jwt token signed with the device's private key.
     * The subject of the jwt token must be the device ID.
     *
     * This call is idempotent.
     *
     * @generated from rpc homecall.v1alpha.DeviceService.UpdateNotificationToken
     */
    readonly updateNotificationToken: {
      readonly name: "UpdateNotificationToken",
      readonly I: typeof UpdateNotificationTokenRequest,
      readonly O: typeof UpdateNotificationTokenResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetCall returns a call for the device to join.
     * Call is authenticated using the a jwt token signed with the device's private key.
     * The subject of the jwt token must be the device ID.
     *
     * @generated from rpc homecall.v1alpha.DeviceService.GetCallDetails
     */
    readonly getCallDetails: {
      readonly name: "GetCallDetails",
      readonly I: typeof GetCallDetailsRequest,
      readonly O: typeof GetCallDetailsResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};
