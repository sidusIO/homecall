// @generated by protoc-gen-es v1.8.0
// @generated from file homecall/v1alpha/office_service.proto (package homecall.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { DeviceSettings } from "./settings_pb.js";

/**
 * DeviceSettings contains the settings for a device.
 *
 * @generated from message homecall.v1alpha.CreateDeviceRequest
 */
export declare class CreateDeviceRequest extends Message<CreateDeviceRequest> {
  /**
   * The name of the device.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Default settings for the device.
   *
   * @generated from field: homecall.v1alpha.DeviceSettings default_settings = 2;
   */
  defaultSettings?: DeviceSettings;

  /**
   * The ID of the tenant the device belongs to.
   *
   * @generated from field: string tenant_id = 3;
   */
  tenantId: string;

  constructor(data?: PartialMessage<CreateDeviceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.CreateDeviceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeviceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeviceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeviceRequest;

  static equals(a: CreateDeviceRequest | PlainMessage<CreateDeviceRequest> | undefined, b: CreateDeviceRequest | PlainMessage<CreateDeviceRequest> | undefined): boolean;
}

/**
 * EnrollDeviceResponse contains the enrollment key for the device.
 *
 * @generated from message homecall.v1alpha.CreateDeviceResponse
 */
export declare class CreateDeviceResponse extends Message<CreateDeviceResponse> {
  /**
   * The new device.
   *
   * @generated from field: homecall.v1alpha.Device device = 2;
   */
  device?: Device;

  constructor(data?: PartialMessage<CreateDeviceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.CreateDeviceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeviceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeviceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeviceResponse;

  static equals(a: CreateDeviceResponse | PlainMessage<CreateDeviceResponse> | undefined, b: CreateDeviceResponse | PlainMessage<CreateDeviceResponse> | undefined): boolean;
}

/**
 * ListDevicesRequest is the request for the ListDevices method.
 *
 * @generated from message homecall.v1alpha.ListDevicesRequest
 */
export declare class ListDevicesRequest extends Message<ListDevicesRequest> {
  /**
   * The ID of the tenant to list devices for.
   *
   * @generated from field: string tenant_id = 1;
   */
  tenantId: string;

  constructor(data?: PartialMessage<ListDevicesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.ListDevicesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDevicesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDevicesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDevicesRequest;

  static equals(a: ListDevicesRequest | PlainMessage<ListDevicesRequest> | undefined, b: ListDevicesRequest | PlainMessage<ListDevicesRequest> | undefined): boolean;
}

/**
 * ListDevicesResponse is the response for the ListDevices method.
 *
 * @generated from message homecall.v1alpha.ListDevicesResponse
 */
export declare class ListDevicesResponse extends Message<ListDevicesResponse> {
  /**
   * The list of devices.
   *
   * @generated from field: repeated homecall.v1alpha.Device devices = 1;
   */
  devices: Device[];

  constructor(data?: PartialMessage<ListDevicesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.ListDevicesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDevicesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDevicesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDevicesResponse;

  static equals(a: ListDevicesResponse | PlainMessage<ListDevicesResponse> | undefined, b: ListDevicesResponse | PlainMessage<ListDevicesResponse> | undefined): boolean;
}

/**
 * StartCallRequest is the request for the StartCall method.
 *
 * @generated from message homecall.v1alpha.StartCallRequest
 */
export declare class StartCallRequest extends Message<StartCallRequest> {
  /**
   * The ID of the device to call.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  constructor(data?: PartialMessage<StartCallRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.StartCallRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartCallRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartCallRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartCallRequest;

  static equals(a: StartCallRequest | PlainMessage<StartCallRequest> | undefined, b: StartCallRequest | PlainMessage<StartCallRequest> | undefined): boolean;
}

/**
 * StartCallResponse contains the call ID and room ID for the call.
 *
 * @generated from message homecall.v1alpha.StartCallResponse
 */
export declare class StartCallResponse extends Message<StartCallResponse> {
  /**
   * The ID of the call.
   *
   * @generated from field: string call_id = 1;
   */
  callId: string;

  /**
   * The ID of the Jitsi room.
   * This ID is used to join the Jitsi room.
   *
   * @generated from field: string jitsi_room_id = 2;
   */
  jitsiRoomId: string;

  /**
   * The JWT used to authenticate the user in the Jitsi room.
   *
   * @generated from field: string jitsi_jwt = 3;
   */
  jitsiJwt: string;

  constructor(data?: PartialMessage<StartCallResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.StartCallResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartCallResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartCallResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartCallResponse;

  static equals(a: StartCallResponse | PlainMessage<StartCallResponse> | undefined, b: StartCallResponse | PlainMessage<StartCallResponse> | undefined): boolean;
}

/**
 * RemoveDeviceRequest is the request for the RemoveDevice method.
 *
 * @generated from message homecall.v1alpha.RemoveDeviceRequest
 */
export declare class RemoveDeviceRequest extends Message<RemoveDeviceRequest> {
  /**
   * The ID of the device to remove.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  constructor(data?: PartialMessage<RemoveDeviceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.RemoveDeviceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveDeviceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveDeviceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveDeviceRequest;

  static equals(a: RemoveDeviceRequest | PlainMessage<RemoveDeviceRequest> | undefined, b: RemoveDeviceRequest | PlainMessage<RemoveDeviceRequest> | undefined): boolean;
}

/**
 * RemoveDeviceResponse is the response for the RemoveDevice method.
 *
 * @generated from message homecall.v1alpha.RemoveDeviceResponse
 */
export declare class RemoveDeviceResponse extends Message<RemoveDeviceResponse> {
  /**
   * The device that was removed.
   *
   * @generated from field: homecall.v1alpha.Device device = 1;
   */
  device?: Device;

  constructor(data?: PartialMessage<RemoveDeviceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.RemoveDeviceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveDeviceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveDeviceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveDeviceResponse;

  static equals(a: RemoveDeviceResponse | PlainMessage<RemoveDeviceResponse> | undefined, b: RemoveDeviceResponse | PlainMessage<RemoveDeviceResponse> | undefined): boolean;
}

/**
 * UpdateDeviceRequest is the request for the UpdateDevice method.
 *
 * @generated from message homecall.v1alpha.UpdateDeviceRequest
 */
export declare class UpdateDeviceRequest extends Message<UpdateDeviceRequest> {
  /**
   * The ID of the device to update.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * The new name of the device.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  constructor(data?: PartialMessage<UpdateDeviceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.UpdateDeviceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeviceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeviceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeviceRequest;

  static equals(a: UpdateDeviceRequest | PlainMessage<UpdateDeviceRequest> | undefined, b: UpdateDeviceRequest | PlainMessage<UpdateDeviceRequest> | undefined): boolean;
}

/**
 * UpdateDeviceResponse is the response for the UpdateDevice method.
 *
 * @generated from message homecall.v1alpha.UpdateDeviceResponse
 */
export declare class UpdateDeviceResponse extends Message<UpdateDeviceResponse> {
  /**
   * The updated device.
   *
   * @generated from field: homecall.v1alpha.Device device = 1;
   */
  device?: Device;

  constructor(data?: PartialMessage<UpdateDeviceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.UpdateDeviceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeviceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeviceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeviceResponse;

  static equals(a: UpdateDeviceResponse | PlainMessage<UpdateDeviceResponse> | undefined, b: UpdateDeviceResponse | PlainMessage<UpdateDeviceResponse> | undefined): boolean;
}

/**
 * WaitForEnrollmentRequest is the request for the WaitForEnrollment method.
 *
 * @generated from message homecall.v1alpha.WaitForEnrollmentRequest
 */
export declare class WaitForEnrollmentRequest extends Message<WaitForEnrollmentRequest> {
  /**
   * The ID of the device to wait for.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  constructor(data?: PartialMessage<WaitForEnrollmentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.WaitForEnrollmentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForEnrollmentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForEnrollmentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForEnrollmentRequest;

  static equals(a: WaitForEnrollmentRequest | PlainMessage<WaitForEnrollmentRequest> | undefined, b: WaitForEnrollmentRequest | PlainMessage<WaitForEnrollmentRequest> | undefined): boolean;
}

/**
 * WaitForEnrollmentResponse is the response for the WaitForEnrollment method.
 *
 * @generated from message homecall.v1alpha.WaitForEnrollmentResponse
 */
export declare class WaitForEnrollmentResponse extends Message<WaitForEnrollmentResponse> {
  /**
   * The device that was enrolled.
   *
   * @generated from field: homecall.v1alpha.Device device = 1;
   */
  device?: Device;

  constructor(data?: PartialMessage<WaitForEnrollmentResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.WaitForEnrollmentResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForEnrollmentResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForEnrollmentResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForEnrollmentResponse;

  static equals(a: WaitForEnrollmentResponse | PlainMessage<WaitForEnrollmentResponse> | undefined, b: WaitForEnrollmentResponse | PlainMessage<WaitForEnrollmentResponse> | undefined): boolean;
}

/**
 * Device represents a device.
 *
 * @generated from message homecall.v1alpha.Device
 */
export declare class Device extends Message<Device> {
  /**
   * The ID of the device.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the device.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The enrollment key for the device.
   * This key is used to authenticate the device during the enrollment process.
   * The key is only set if the device is not enrolled.
   *
   * @generated from field: string enrollment_key = 3;
   */
  enrollmentKey: string;

  /**
   * Whether the device is online or offline.
   * Online devices are currently connected to the server.
   *
   * @generated from field: bool online = 4;
   */
  online: boolean;

  /**
   * The tenant ID the device belongs to.
   *
   * @generated from field: string tenant_id = 5;
   */
  tenantId: string;

  constructor(data?: PartialMessage<Device>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "homecall.v1alpha.Device";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device;

  static equals(a: Device | PlainMessage<Device> | undefined, b: Device | PlainMessage<Device> | undefined): boolean;
}
