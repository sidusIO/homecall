syntax = "proto3";

package homecall.v1alpha;

option go_package = "sidus.io/pgc/homecall/v1alpha;homecall";

// The TenantService service provides methods for managing tenants.
// This service is intended to be used by the office application.
service TenantService {
    // CreateTenant creates a new tenant.
    rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse);

    // ListTenants returns a list of all tenants the user has access to.
    rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse);

    // RemoveTenant removes a tenant.
    rpc RemoveTenant(RemoveTenantRequest) returns (RemoveTenantResponse);

    // ListTenantMembers returns a list of all tenant members.
    rpc ListTenantMembers(ListTenantMembersRequest) returns (ListTenantMembersResponse);

    // RemoveTenantMember removes a tenant member.
    rpc RemoveTenantMember(RemoveTenantMemberRequest) returns (RemoveTenantMemberResponse);

    // UpdateTenantMember updates a tenant member.
    rpc UpdateTenantMember(UpdateTenantMemberRequest) returns (UpdateTenantMemberResponse);

    // CreateTenantInvite creates a new tenant invite.
    rpc CreateTenantInvite(CreateTenantInviteRequest) returns (CreateTenantInviteResponse);

    // ListTenantInvites returns a list of all tenant invites.
    rpc ListTenantInvites(ListTenantInvitesRequest) returns (ListTenantInvitesResponse);

    // RemoveTenantInvite removes a tenant invite.
    rpc RemoveTenantInvite(RemoveTenantInviteRequest) returns (RemoveTenantInviteResponse);

    // AcceptTenantInvite accepts a tenant invite.
    rpc AcceptTenantInvite(AcceptTenantInviteRequest) returns (AcceptTenantInviteResponse);
}

// CreateTenantRequest is the request message for the CreateTenant method.
message CreateTenantRequest {
    // The name of the tenant.
    string name = 1;
}

// CreateTenantResponse is the response message for the CreateTenant method.
message CreateTenantResponse {
    // The tenant that was created.
    Tenant tenant = 1;
}

// ListTenantsRequest is the request message for the ListTenants method.
message ListTenantsRequest {}

// ListTenantsResponse is the response message for the ListTenants method.
message ListTenantsResponse {
    // The list of tenants.
    repeated Tenant tenants = 1;
}

// RemoveTenantRequest is the request message for the RemoveTenant method.
message RemoveTenantRequest {
    // The ID of the tenant to remove.
    string id = 1;
}

// RemoveTenantResponse is the response message for the RemoveTenant method.
message RemoveTenantResponse {}

// ListTenantMembersRequest is the request message for the ListTenantMembers method.
message ListTenantMembersRequest {
    // The ID of the tenant to list the members of.
    string tenant_id = 1;
}

// ListTenantMembersResponse is the response message for the ListTenantMembers method.
message ListTenantMembersResponse {
    // The list of tenant members.
    repeated TenantMember tenant_members = 1;
}

// RemoveTenantMemberRequest is the request message for the RemoveTenantMember method.
message RemoveTenantMemberRequest {
    // The ID of the tenant member.
    string id = 1;
}

// RemoveTenantMemberResponse is the response message for the RemoveTenantMember method.
message RemoveTenantMemberResponse {}

// UpdateTenantMemberRequest is the request message for the UpdateTenantMember method.
message UpdateTenantMemberRequest {
    // The ID of the tenant member.
    string id = 1;

    // The role of the member.
    Role role = 3;
}

// UpdateTenantMemberResponse is the response message for the UpdateTenantMember method.
message UpdateTenantMemberResponse {}

// CreateTenantInviteRequest is the request message for the CreateTenantInvite method.
message CreateTenantInviteRequest {
    // The ID of the tenant to create the invite for.
    string tenant_id = 1;

    // The email of the user to invite.
    string email = 2;

    // The role of the member.
    Role role = 3;
}

// CreateTenantInviteResponse is the response message for the CreateTenantInvite method.
message CreateTenantInviteResponse {
    // The tenant invite that was created.
    TenantInvite tenant_invite = 1;
}

// ListTenantInvitesRequest is the request message for the ListTenantInvites method.
message ListTenantInvitesRequest {
    // The ID of the tenant to list the invites of.
    string tenant_id = 1;
}

// ListTenantInvitesResponse is the response message for the ListTenantInvites method.
message ListTenantInvitesResponse {
    // The list of tenant invites.
    repeated TenantInvite tenant_invites = 1;
}

// RemoveTenantInviteRequest is the request message for the RemoveTenantInvite method.
message RemoveTenantInviteRequest {
    // The ID of the tenant invite to remove.
    string id = 1;
}

// RemoveTenantInviteResponse is the response message for the RemoveTenantInvite method.
message RemoveTenantInviteResponse {}

// AcceptTenantInviteRequest is the request message for the AcceptTenantInvite method.
message AcceptTenantInviteRequest {
    // The ID of the tenant invite to accept.
    string id = 1;
}

// AcceptTenantInviteResponse is the response message for the AcceptTenantInvite method.
message AcceptTenantInviteResponse {}

// Tenant represents a tenant.
message Tenant {
    // The ID of the tenant.
    string id = 1;

    // The name of the tenant.
    string name = 2;

    // The maximum number of devices the tenant can have.
    int64 max_devices = 3;
}

// TenantMember represents a tenant member.
message TenantMember {
    // The ID of the tenant member.
    string id = 1;

    // The ID of the tenant.
    string tenant_id = 2;

    // The ID of the user.
    string subject = 3;

    // The email of the user.
    string verified_email = 4;

    // The name of the user.
    string display_name = 5;

    // The role of the member.
    Role role = 6;
}

// TenantInvite represents a tenant invite.
message TenantInvite {
    // The ID of the tenant invite.
    string id = 1;

    // The ID of the tenant.
    string tenant_id = 2;

    // The email of the user.
    string email = 3;

    // The role of the member.
    Role role = 4;
}

// Role represents a role.
enum Role {
    // The role is unknown.
    ROLE_UNSPECIFIED = 0;

    // The role is an admin.
    ROLE_ADMIN = 1;

    // The role is a member.
    ROLE_MEMBER = 2;
}
